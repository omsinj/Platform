
Building a Trivia Platform with AIML Integration
Directory
Directory: C:\Users\ojaga\Desktop\FinalTest
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/06/2024     23:17                trivia_platform
PS C:\Users\ojaga\Desktop\FinalTest> cd .\trivia_platform\
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform> dir
Directory: C:\Users\ojaga\Desktop\FinalTest\trivia_platform
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/06/2024     23:31                games
d-----        23/06/2024     21:45                static
d-----        23/06/2024     23:17                staticfiles
d-----        23/06/2024     23:35                trivia-frontend
d-----        23/06/2024     21:27                trivia_platform
-a----        23/06/2024     23:12         159744 db.sqlite3
-a----        23/06/2024     21:26            693 manage.py
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform> cd games
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\games> dir
Directory: C:\Users\ojaga\Desktop\FinalTest\trivia_platform\games
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/06/2024     21:30                migrations
d-----        23/06/2024     21:44                templates
d-----        23/06/2024     23:43                __pycache__
-a----        23/06/2024     21:27             66 admin.py
-a----        23/06/2024     22:09            975 ai_model.py
-a----        23/06/2024     22:58            914 ai_service.py
-a----        23/06/2024     21:27            148 apps.py
-a----        23/06/2024     21:30            598 models.py
-a----        23/06/2024     22:10           1998 question_classifier.pkl
-a----        23/06/2024     23:31            251 serializers.py
-a----        23/06/2024     21:27             63 tests.py
-a----        23/06/2024     23:43            764 urls.py
-a----        23/06/2024     23:31           1969 views.py
-a----        23/06/2024     21:27              0 __init__.py
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\games> cd templates
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\games\templates> dir
Directory: C:\Users\ojaga\Desktop\FinalTest\trivia_platform\games\templates
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        23/06/2024     21:43              0 add_question.html
-a----        23/06/2024     23:26           2270 base.html
-a----        23/06/2024     21:40              0 games_menu.html
-a----        23/06/2024     21:34            334 home.html
-a----        23/06/2024     21:42              0 levels.html
-a----        23/06/2024     21:43              0 play_level.html
-a----        23/06/2024     21:41              0 resources.html
-a----        23/06/2024     21:44            327 rewards.html
-a----        23/06/2024     21:42              0 system_generated.html
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\games\templates>
S C:\Users\ojaga\Desktop\FinalTest> cd .\trivia_platform\
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform> dir
    Directory: C:\Users\ojaga\Desktop\FinalTest\trivia_platform
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/06/2024     23:31                games
d-----        23/06/2024     21:45                static
d-----        23/06/2024     23:17                staticfiles
d-----        23/06/2024     23:35                trivia-frontend
d-----        23/06/2024     21:27                trivia_platform
-a----        23/06/2024     23:12         159744 db.sqlite3
-a----        23/06/2024     21:26            693 manage.py
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform> cd .\trivia-frontend\
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend> dir
 Directory: C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/06/2024     23:38                build
d-----        23/06/2024     22:37                node_modules
d-----        23/06/2024     22:20                public
d-----        23/06/2024     22:31                src
-a----        23/06/2024     22:15            310 .gitignore
-a----        23/06/2024     23:38         753865 package-lock.json
-a----        23/06/2024     22:37            876 package.json
-a----        23/06/2024     22:15           3359 README.md
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend> cd src
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend\src> dir
Directory: C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend\src
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/06/2024     23:50                components
-a----        23/06/2024     22:50            565 App.css
-a----        23/06/2024     23:48           1037 App.js
-a----        23/06/2024     22:15            246 App.test.js
-a----        23/06/2024     22:15            366 index.css
-a----        23/06/2024     22:15            535 index.js
-a----        23/06/2024     22:15           2632 logo.svg
-a----        23/06/2024     22:15            362 reportWebVitals.js
-a----        23/06/2024     22:15            241 setupTests.js
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend\src> cd compenets
cd : Cannot find path 'C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend\src\compenets' because it does not exist.
At line:1 char:1
+ cd compenets
+ ~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (C:\Users\ojaga\...d\src\compenets:String) [Set-Location], ItemNotFoundException
    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.SetLocationCommand
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend\src> cd components
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend\src\components> dir
    Directory: C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend\src\components
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        23/06/2024     22:32            458 GamesMenu.js
-a----        23/06/2024     22:31              0 Home.js
-a----        23/06/2024     23:33            825 QuestionList.js
-a----        23/06/2024     23:47            206 ResourcesMenu.js
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia-frontend\src\components>
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform> cd .\trivia_platform\
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia_platform> dir
Directory: C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia_platform
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/06/2024     23:40                __pycache__
-a----        23/06/2024     21:26            423 asgi.py
-a----        23/06/2024     23:16           3470 settings.py
-a----        23/06/2024     23:40            974 urls.py
-a----        23/06/2024     21:26            423 wsgi.py
-a----        23/06/2024     21:26              0 __init__.py
PS C:\Users\ojaga\Desktop\FinalTest\trivia_platform\trivia_platform>
Overview
This will guide you through creating a trivia platform using Python, Django, React, and machine learning. The platform will allow users to engage in trivia games with system-generated or user-generated questions. System-generated questions will be classified using machine learning to determine their difficulty levels.
Visual Architecture Diagram
1.	Client (Web Browser):
o	Represents users accessing the trivia platform through their web browsers.
2.	React Frontend:
o	Handles the presentation layer and user interface using React components.
o	Communicates with the Django backend through HTTP requests (API calls).
3.	Django Backend:
o	Manages the application logic, data storage, and business rules.
o	Utilizes Django models for data persistence and interacts with the database.
o	Provides APIs (RESTful endpoints) for frontend communication.
4.	Database (PostgreSQL):
o	Stores persistent data such as user information, questions, categories, levels, rewards, etc.
o	Accessed and managed by Django ORM (Object-Relational Mapping).
5.	External Services:
o	Represents any external services or integrations used by the trivia platform, such as machine learning models (not detailed in the previous conversations).
________________________________________
Table of Contents
User Flow
1.	Project Setup
2.	Creating Django Models
3.	Building Django Views and URL Configuration
4.	Creating Templates
5.	Styling the Platform with CSS
6.	Integrating Machine Learning
7.	Creating the React Frontend
8.	Running the Platform
________________________________________
User Flow
1.	Main Menu
o	User visits the platform.
o	User is presented with two main options: Games and Resources.
2.	Games Menu
o	User selects "Games."
o	User chooses between "System Generated" or "User Generated" games.
3.	System Generated Games
o	User selects a category: Culture Journey, DEI, or Fun Pack.
o	User selects play mode: Individual or Team.
o	User starts at the Novice level.
	Each level contains 25 questions.
	User progresses through Beginner, Intermediate, and Expert levels.
	User earns badges and rewards for each level completed.
4.	User Generated Games
o	User selects play mode: Team only.
o	User sets the number of questions and other limits.
o	User plays the game with the customized settings.
5.	Resources Menu
o	User selects "Resources."
o	User accesses various videos, articles, and other resources on Culture and DEI.
o	User can search and filter resources based on categories.
6.	Main Menu
o	User visits the platform.
o	User is presented with two main options: Games and Resources.
7.	Games Menu
o	User selects "Games."
o	User chooses between "System Generated" or "User Generated" games.
8.	System Generated Games
o	User selects a category: Culture Journey, DEI, or Fun Pack.
o	User selects play mode: Individual or Team.
o	User starts at the Novice level.
	Each level contains 25 questions.
	User progresses through Beginner, Intermediate, and Expert levels.
	User earns badges and rewards for each level completed.
9.	User Generated Games
o	User selects play mode: Team only.
o	User sets the number of questions and other limits.
o	User plays the game with the customized settings.
10.	Resources Menu
o	User selects "Resources."
o	User accesses various videos, articles, and other resources on Culture and DEI.
o	User can search and filter resources based on categories.

1. Project Setup
Install Django and Set Up the Project
1.	Install Django:
pip install django
2.	Create a Django Project:
django-admin startproject trivia_platform
cd trivia_platform
3.	Create a Django App:
python manage.py startapp games
4.	Add the App to settings.py:
# trivia_platform/settings.py
INSTALLED_APPS = [
    ...
    'games',
]
5.	Set Up Static Files:
# trivia_platform/settings.py
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
________________________________________

2. Creating Django Models
Define Models in games/models.py:
# ai_model.py
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn import metrics
import joblib

# Sample data
data = {
    'question': ["What is 2+2?", "Explain the theory of relativity.", "What is the capital of France?"],
    'difficulty': ['novice', 'expert', 'beginner']
}

df = pd.DataFrame(data)

# Text processing and model pipeline
X = df['question']
y = df['difficulty']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

pipeline = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('clf', LogisticRegression())
])

pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)

print(metrics.classification_report(y_test, y_pred))

# Save the model
joblib.dump(pipeline, 'question_classifier.pkl')
Apply Migrations:
python manage.py makemigrations
python manage.py migrate
________________________________________
3. Building Django Views and URL Configuration
Create Views in games/views.py:
from django.shortcuts import render
from .models import Category, Level, Reward, Question
from .ai_service import classify_question  # Corrected import statement
from rest_framework import generics
from .models import Question
from .serializers import QuestionSerializer

def home(request):
    return render(request, 'home.html')

def games_menu(request):
    return render(request, 'games_menu.html')

def resources_menu(request):
    return render(request, 'resources.html')

def system_generated(request):
    categories = Category.objects.all()
    return render(request, 'system_generated.html', {'categories': categories})

def category_levels(request, category_id):
    category = Category.objects.get(id=category_id)
    levels = Level.objects.all()
    return render(request, 'levels.html', {'category': category, 'levels': levels})

def play_level(request, category_id, level_id):
    category = Category.objects.get(id=category_id)
    level = Level.objects.get(id=level_id)
    questions = Question.objects.filter(category=category, level=level)
    return render(request, 'play_level.html', {'category': category, 'level': level, 'questions': questions})

def add_question(request):
    if request.method == 'POST':
        question_text = request.POST.get('question')
        category_id = request.POST.get('category_id')
        level = classify_question(question_text)
        category = Category.objects.get(id=category_id)
        Question.objects.create(text=question_text, category=category, level=Level.objects.get(name=level))
    categories = Category.objects.all()
    return render(request, 'add_question.html', {'categories': categories})

def rewards(request):
    rewards = Reward.objects.all()
    return render(request, 'rewards.html', {'rewards': rewards})

class QuestionListAPIView(generics.ListAPIView):
    queryset = Question.objects.all()
    serializer_class = QuestionSerializer

Update URL Configurations in games/urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('games/', views.games_menu, name='games'),
    path('resources/', views.resources_menu, name='resources'),
    path('games/system-generated/', views.system_generated, name='system_generated'),
    path('games/system-generated/<int:category_id>/levels/', views.category_levels, name='category_levels'),
    path('games/system-generated/<int:category_id>/levels/<int:level_id>/', views.play_level, name='play_level'),
    path('add_question/', views.add_question, name='add_question'),
    path('rewards/', views.rewards, name='rewards'),
    path('api/questions/', views.QuestionListAPIView.as_view(), name='question_list_api'),
]
Include the App URLs in trivia_platform/urls.py:
"""
URL configuration for trivia_platform project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import include, path
from django.views.generic import TemplateView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('games.urls')),
    path('', TemplateView.as_view(template_name='index.html'), name='index'),
]

________________________________________
4. Creating Templates
Base Template:
<!-- templates/base.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trivia Platform</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <!-- Google Fonts - Roboto -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>

<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="{% url 'home' %}">Trivia Platform</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'home' %}"><i class="fas fa-home"></i> Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'games' %}"><i class="fas fa-gamepad"></i> Games</a>
                    </li>
                </ul>
            </div>
        </nav>
    </header>

    <div class="container">
        {% block content %}
        <!-- Content block to be extended in child templates -->
        {% endblock %}
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>

</html>
Home Template:
<!-- templates/home.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>Welcome to the Trivia Platform</h1>
    <div class="menu">
        <a href="{% url 'games' %}" class="btn">Games</a>
        <a href="{% url 'resources' %}" class="btn">Resources</a>
    </div>
</div>
{% endblock %}
Games Menu Template:
<!-- templates/games_menu.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Games Menu</h2>
    <div class="menu">
        <a href="{% url 'system_generated' %}" class="btn">System Generated</a>
        <a href="{% url 'user_generated' %}" class="btn">User Generated</a>
    </div>
</div>
{% endblock %}
Resources Template:
<!-- templates/resources.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Resources</h2>
    <p>Here you can find videos, articles, and other resources on Culture and DEI.</p>
</div>
{% endblock %}
System Generated Games Template:
<!-- templates/system_generated.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>System Generated Games</h2>
    <div class="categories">
        {% for category in categories %}
        <a href="{% url 'category_levels' category.id %}" class="btn">{{ category.name }}</a>
        {% endfor %}
    </div>
</div>
{% endblock %}
Levels Template:
<!-- templates/levels.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Select a Level</h2>
    <div class="levels">
        {% for level in levels %}
        <a href="{% url 'play_level' category_id=category.id level_id=level.id %}" class="btn">{{ level.name }}</a>
        {% endfor %}
    </div>
</div>
{% endblock %}
Play Level Template:
<!-- templates/play_level.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>{{ category.name }} - {{ level.name }}</h2>
    <div class="questions">
        {% for question in questions %}
        <div class="question">
            <p>{{ question.text }}</p>
            <!-- Add form or buttons for answering the question -->
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}
Add Question Template:
<!-- templates/add_question.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Add a New Question</h2>
    <form method="post">
        {% csrf_token %}
        <label for="question">Question:</label>
        <input type="text" id="question" name="question" required>
        <label for="category_id">Category:</label>
        <select id="category_id" name="category_id" required>
            {% for category in categories %}
            <option value="{{ category.id }}">{{ category.name }}</option>
            {% endfor %}
        </select>
        <button type="submit" class="btn">Add Question</button>
    </form>
</div>
{% endblock %}
Rewards Template:
<!-- templates/rewards.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Rewards</h2>
    <ul>
        {% for reward in rewards %}
        <li>{{ reward.user.username }} - {{ reward.points }} points - {{ reward.badge }}</li>
        {% endfor %}
    </ul>
</div>
{% endblock %}
________________________________________
5. Styling the Platform with CSS
Create a CSS File:
/* static/css/styles.css */
body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f9;
    color: #333;
}

header {
    background-color: #333;
    color: white;
    padding: 10px 0;
    box-shadow: 0 4px 2px -2px gray;
}

nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
    display: flex;
    justify-content: center;
}

nav ul li {
    margin: 0 15px;
}

nav ul li a {
    color: white;
    text-decoration: none;
    font-weight: 700;
}

nav ul li a:hover {
    text-decoration: underline;
}

.container {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    background-color: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    text-align: center;
}

.menu {
    display: flex;
    justify-content: center;
    margin-top: 20px;
}

.btn {
    display: inline-block;
    padding: 15px 30px;
    margin: 10px;
    background-color: #007BFF;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-weight: 700;
    transition: background-color 0.3s ease;
}

.btn:hover {
    background-color: #0056b3;
}

.categories, .levels {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin-top: 20px;
}

.categories a, .levels a {
    margin: 10px;
}

form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
}

form input, form select, form button {
    padding: 10px;
    margin: 5px;
    width: 80%;
    border: 1px solid #ccc;
    border-radius: 5px;
}

footer {
    text-align: center;
    padding: 10px 0;
    background-color: #333;
    color: white;
    position: fixed;
    bottom: 0;
    width: 100%;
    box-shadow: 0 -4px 2px -2px gray;
}

.questions {
    text-align: left;
    margin-top: 20px;
}

.question {
    margin-bottom: 20px;
}


6. Integrating Machine Learning
Create and Train a Machine Learning Model:
1.	Install Required Libraries:
pip install scikit-learn pandas numpy joblib
2.	Create a Machine Learning Model:
# ai_model.py
3.	# ai_model.py
4.	import pandas as pd
5.	from sklearn.feature_extraction.text import TfidfVectorizer
6.	from sklearn.model_selection import train_test_split
7.	from sklearn.linear_model import LogisticRegression
8.	from sklearn.pipeline import Pipeline
9.	from sklearn import metrics
10.	import joblib
11.	
12.	# Sample data
13.	data = {
14.	    'question': ["What is 2+2?", "Explain the theory of relativity.", "What is the capital of France?"],
15.	    'difficulty': ['novice', 'expert', 'beginner']
16.	}
17.	
18.	df = pd.DataFrame(data)
19.	
20.	# Text processing and model pipeline
21.	X = df['question']
22.	y = df['difficulty']
23.	
24.	X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
25.	
26.	pipeline = Pipeline([
27.	    ('tfidf', TfidfVectorizer()),
28.	    ('clf', LogisticRegression())
29.	])
30.	
31.	pipeline.fit(X_train, y_train)
32.	y_pred = pipeline.predict(X_test)
33.	
34.	print(metrics.classification_report(y_test, y_pred))
35.	
36.	# Save the model
37.	joblib.dump(pipeline, 'question_classifier.pkl')
38.	Load and Use the Model:
# ai_service.py
# ai_service.py
import os
import joblib

# Define the path to the model file
MODEL_FILE = os.path.join(os.path.dirname(__file__), 'question_classifier.pkl')

# Function to classify a question
def classify_question(question_text):
    try:
        model = joblib.load(MODEL_FILE)
        # Your classification logic using the loaded model
        # ...
        return "Some classification result"
    except FileNotFoundError:
        # Handle the case where the model file is missing
        # Example: log an error, return a default classification, etc.
        print(f"Error: Model file '{MODEL_FILE}' not found.")
        return "Default classification"
    except Exception as e:
        # Handle other exceptions that may occur during classification
        print(f"Error: {str(e)}")
        return "Error during classification"

# Other functions and code related to ai_service.py
________________________________________
7. Creating the React Frontend
1.	Set Up React:
npx create-react-app trivia-frontend
cd trivia-frontend
2.	Install Axios for API Calls:
npm install axios
3.	Create React Components:
o	Home Component:
4.	// src/components/Home.js
5.	import React from 'react';
6.	import { Link } from 'react-router-dom';
7.	
8.	const Home = () => (
9.	    <div className="container">
10.	        <h1>Welcome to the Trivia Platform</h1>
11.	        <div className="menu">
12.	            <Link to="/games" className="btn">Games</Link>
13.	            <Link to="/resources" className="btn">Resources</Link>
14.	        </div>
15.	    </div>
16.	);
17.	
18.	export default Home;
o	Games Menu Component:
19.	// src/components/GamesMenu.js
20.	import React from 'react';
21.	import { NavLink } from 'react-router-dom'; // Import NavLink instead of Link
22.	
23.	const GamesMenu = () => (
24.	    <div className="container">
25.	        <h2>Games Menu</h2>
26.	        <div className="menu">
27.	            <NavLink to="/games/system-generated" className="btn">System Generated</NavLink>
28.	            <NavLink to="/games/user-generated" className="btn">User Generated</NavLink>
29.	        </div>
30.	    </div>
31.	);
32.	
33.	export default GamesMenu;
34.	
35.	Set Up React Router:
36.	// src/App.js
37.	import React from 'react';
38.	import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
39.	import logo from './logo.svg';
40.	import './App.css';
41.	import Home from './components/Home';
42.	import GamesMenu from './components/GamesMenu';
43.	
44.	const App = () => (
45.	  <Router>
46.	    <div className="App">
47.	      <header className="App-header">
48.	        <img src={logo} className="App-logo" alt="logo" />
49.	        <p>
50.	          Edit <code>src/App.js</code> and save to reload.
51.	        </p>
52.	        <a
53.	          className="App-link"
54.	          href="https://reactjs.org"
55.	          target="_blank"
56.	          rel="noopener noreferrer"
57.	        >
58.	          Learn React
59.	        </a>
60.	      </header>
61.	      <Routes>
62.	        <Route path="/" element={<Home />} />
63.	        <Route path="/games" element={<GamesMenu />} />
64.	        {/* Add more routes as needed */}
65.	      </Routes>
66.	    </div>
67.	  </Router>
68.	);
69.	
70.	export default App;
71.	
Install react-router-dom:
npm install react-router-dom
72.	Run the React App:
npm start
________________________________________
8. Running the Platform
1.	Run Django Development Server:
python manage.py runserver
2.	Run React Development Server:
npm start
3.	Access the Platform:
o	Go to http://localhost:3000 for the React frontend.
o	Django backend at http://localhost:8000.

Integrating Django Backend with React Frontend
1. Django Setup
Ensure the Django project is configured to serve the React frontend and handle API requests from it.
a. Static Files Configuration:
In Django settings (settings.py), have the following configurations:
"""
Django settings for trivia_platform project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!1@3l2$t^ipj!1aub%go4!=z6h=%dad&b_=+-ta*^y$y1dj7(&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'games',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'trivia_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'games' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'trivia_platform.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Absolute filesystem path to the directory that will hold collected static files.
STATIC_ROOT = BASE_DIR / 'staticfiles'

b. URLs Configuration:
Update urls.py to include API endpoints and handle React frontend routing.
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('games/', views.games_menu, name='games'),
    path('resources/', views.resources_menu, name='resources'),
    path('games/system-generated/', views.system_generated, name='system_generated'),
    path('games/system-generated/<int:category_id>/levels/', views.category_levels, name='category_levels'),
    path('games/system-generated/<int:category_id>/levels/<int:level_id>/', views.play_level, name='play_level'),
    path('add_question/', views.add_question, name='add_question'),
    path('rewards/', views.rewards, name='rewards'),
    path('api/questions/', views.QuestionListAPIView.as_view(), name='question_list_api'),
]
2. Create API Views in Django
Django will expose API endpoints that React will communicate with.
a. Install Django REST Framework:
pip install djangorestframework
b. Create API Views:
Create Django views that serve JSON responses for React to consume.
from django.shortcuts import render
from .models import Category, Level, Reward, Question
from .ai_service import classify_question  # Corrected import statement
from rest_framework import generics
from .models import Question
from .serializers import QuestionSerializer

def home(request):
    return render(request, 'home.html')

def games_menu(request):
    return render(request, 'games_menu.html')

def resources_menu(request):
    return render(request, 'resources.html')

def system_generated(request):
    categories = Category.objects.all()
    return render(request, 'system_generated.html', {'categories': categories})

def category_levels(request, category_id):
    category = Category.objects.get(id=category_id)
    levels = Level.objects.all()
    return render(request, 'levels.html', {'category': category, 'levels': levels})

def play_level(request, category_id, level_id):
    category = Category.objects.get(id=category_id)
    level = Level.objects.get(id=level_id)
    questions = Question.objects.filter(category=category, level=level)
    return render(request, 'play_level.html', {'category': category, 'level': level, 'questions': questions})

def add_question(request):
    if request.method == 'POST':
        question_text = request.POST.get('question')
        category_id = request.POST.get('category_id')
        level = classify_question(question_text)
        category = Category.objects.get(id=category_id)
        Question.objects.create(text=question_text, category=category, level=Level.objects.get(name=level))
    categories = Category.objects.all()
    return render(request, 'add_question.html', {'categories': categories})

def rewards(request):
    rewards = Reward.objects.all()
    return render(request, 'rewards.html', {'rewards': rewards})

class QuestionListAPIView(generics.ListAPIView):
    queryset = Question.objects.all()
    serializer_class = QuestionSerializer

c. Serialise Data:
Create serialisers to convert Django model data into JSON format.
# games/serializers.py

from rest_framework import serializers
from .models import Question

class QuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Question
        fields = ['id', 'text', 'category', 'level']

3. React Setup
Configure your React frontend to fetch data from Django APIs.
a. API Requests:
Use Axios or Fetch API to fetch data from Django APIs.
// src/components/QuestionList.js

import React, { useEffect, useState } from 'react';
import axios from 'axios';

const QuestionList = () => {
    const [questions, setQuestions] = useState([]);

    useEffect(() => {
        axios.get('/api/questions/')
            .then(response => {
                setQuestions(response.data);
            })
            .catch(error => {
                console.error('Error fetching data: ', error);
            });
    }, []);

    return (
        <div>
            <h2>Questions</h2>
            <ul>
                {questions.map(question => (
                    <li key={question.id}>
                        {question.text}
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default QuestionList;

b. React Router Configuration:
Configure React Router to handle frontend routes.
// src/App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import logo from './logo.svg';
import './App.css';
import Home from './components/Home';
import GamesMenu from './components/GamesMenu';
import ResourcesMenu from './components/ResourcesMenu';

const App = () => (
  <Router>
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/games" element={<GamesMenu />} />
        <Route path="/resources" element={<ResourcesMenu />} />
        {/* Add more routes as needed */}
      </Routes>
    </div>
  </Router>
);

export default App;

4. Serving React Files from Django
Configure Django to serve the React frontend files.
a. Build React App:
Build React app for production:
npm run build
b. Django Configuration:
Update Django settings to serve static and media files:
# settings.py

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
c. Serve React Files:
Create a view to serve the React frontend:
# games/views.py

from django.shortcuts import render

def index(request):
    return render(request, 'index.html')
d. URLs Configuration:
Configure a catch-all URL route in Django to serve the React frontend:
# trivia_platform/urls.py

"""
URL configuration for trivia_platform project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import include, path
from django.views.generic import TemplateView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('games.urls')),
    path('', TemplateView.as_view(template_name='index.html'), name='index'),
]

5. Run Django and React Servers
Start both Django and React servers.
a. Django Development Server:
python manage.py runserver
b. React Development Server:
npm start
6. Accessing the Integrated Platform
Open web browser and navigate to http://localhost:8000 to access the integrated trivia platform. React frontend routes (/, /games, /resources, etc.) should load seamlessly with data fetched from Django backend APIs (/api/questions/, etc.).
Testing the Integrated System
1. Unit Testing
a. Django Backend:
•	Models: Write tests to verify the correctness of your models and their relationships.
python
Copy code
# games/tests/test_models.py

from django.test import TestCase
from .models import Category, Level, Question

class QuestionModelTest(TestCase):

    def setUp(self):
        self.category = Category.objects.create(name='Culture')
        self.level = Level.objects.create(name='Novice')
        self.question = Question.objects.create(text='What is 2+2?', category=self.category, level=self.level)

    def test_question_text(self):
        self.assertEqual(self.question.text, 'What is 2+2?')

    def test_question_category(self):
        self.assertEqual(self.question.category.name, 'Culture')

    def test_question_level(self):
        self.assertEqual(self.question.level.name, 'Novice')
•	Views: Test views using Django's test client to check API responses.
python
Copy code
# games/tests/test_views.py

from django.test import TestCase, Client
from django.urls import reverse

class QuestionAPITest(TestCase):

    def setUp(self):
        self.client = Client()

    def test_question_list_api(self):
        response = self.client.get(reverse('question_list_api'))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.json()), 1)  # Adjust based on your data
b. React Frontend:
•	Components: Use Jest and React Testing Library to test React components.
javascript
Copy code
// src/components/QuestionList.test.js

import React from 'react';
import { render } from '@testing-library/react';
import QuestionList from './QuestionList';

test('renders questions correctly', () => {
  const { getByText } = render(<QuestionList />);
  const questionElement = getByText(/Questions/i);
  expect(questionElement).toBeInTheDocument();
});
2. Integration Testing
Test how Django backend APIs interact with React frontend components.
•	End-to-End Testing: Use tools like Cypress for end-to-end testing of user interactions across the platform.
javascript
Copy code
// cypress/integration/question_spec.js

describe('Trivia Platform', () => {
  it('Loads questions from API', () => {
    cy.visit('/');
    cy.contains('System Generated').click();
    cy.contains('Select a Level').click();
    cy.contains('Novice').click();
    cy.get('.question').should('have.length', 25);  // Adjust based on your data
  });
});
Debugging the Integrated System
1. Logging
•	Django Backend: Utilise Django's built-in logging to capture errors and debug information.
# settings.py

LOGGING = {
    'version': 1,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'django.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
•	React Frontend: Use console.log() statements strategically in React components to trace data flow and state changes.
2. Network Inspection
•	Browser Developer Tools: Use Chrome DevTools or Firefox Developer Tools to inspect network requests and responses. Ensure API calls return expected data.
3. Error Handling
•	Backend: Implement custom error handling in Django views and serializers to provide meaningful responses.
# games/views.py

from rest_framework import status
from rest_framework.response import Response

def question_list_api(request):
    try:
        questions = Question.objects.all()
        serializer = QuestionSerializer(questions, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
•	Frontend: Implement error boundaries in React components to gracefully handle errors and display fallback UI.
// src/ErrorBoundary.js

import React, { Component } from 'react';

class ErrorBoundary extends Component {
  state = { hasError: false };

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error caught by ErrorBoundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <h2>Something went wrong.</h2>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;


